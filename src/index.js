const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');
const express = require('express');
const ExcelJS = require('exceljs');
require('dotenv').config();

const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err));

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  userId: String,
  chatId: String,
  paymentStatus: { type: String, default: 'pending' },
  paymentId: String,
  joinedChannel: { type: Boolean, default: false },
  inviteLink: String,
  inviteLinkExpires: Number,
  firstName: String,
  username: String,
  phoneNumber: String,
  paymentDate: Date,
  paymentDocument: { type: String, default: null }, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ String –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
});

const User = mongoose.model('User', UserSchema);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ÆKassa –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const { createPayment, checkPayment } = require('./yookassa');

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const setMainMenu = async (userId) => {
  const isAdmin = userId === process.env.ADMIN_CHAT_ID;
  const commands = [];
  if (isAdmin) {
    commands.push({ command: 'admin', description: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' });
  }
  await bot.telegram.setMyCommands(commands, { scope: { type: 'chat', chat_id: userId } });
};

const setSupportMenu = async (userId) => {
  const isAdmin = userId === process.env.ADMIN_CHAT_ID;
  const commands = [];
  if (isAdmin) {
    commands.push({ command: 'admin', description: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' });
  }
  await bot.telegram.setMyCommands(commands, { scope: { type: 'chat', chat_id: userId } });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –ÆKassa
app.get('/return', async (req, res) => {
  const { paymentId } = req.query;
  if (paymentId) {
    const user = await User.findOne({ paymentId });
    if (user) {
      await bot.telegram.sendMessage(user.chatId, '–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–æ—Ç–µ.');
    }
  }
  res.send('–û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.');
});

// Health check –¥–ª—è Render
app.get('/health', (req, res) => res.sendStatus(200));

// –í–µ–±—Ö—É–∫ –¥–ª—è –ÆKassa
app.post('/webhook/yookassa', async (req, res) => {
  const { event, object } = req.body;
  console.log(`Received Yookassa webhook: ${event}`);

  if (event === 'payment.succeeded') {
    const user = await User.findOne({ paymentId: object.id });
    if (user && !user.joinedChannel) {
      try {
        const expireDate = Math.floor(Date.now() / 1000) + 24 * 60 * 60; // 24 —á–∞—Å–∞
        const chatInvite = await bot.telegram.createChatInviteLink(
            process.env.CHANNEL_ID,
            {
              name: `Invite for user_${user.userId}`,
              member_limit: 1,
              creates_join_request: false,
              expire_date: expireDate,
            }
        );

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
        const paymentText = `–ü–ª–∞—Ç–µ–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n` +
            `ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${object.id}\n` +
            `–°—É–º–º–∞: ${object.amount.value} ${object.amount.currency}\n` +
            `–î–∞—Ç–∞: ${new Date(object.created_at).toLocaleString('ru-RU')}\n` +
            `–°—Ç–∞—Ç—É—Å: ${object.status}\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.userId}`;
        const paymentDoc = await bot.telegram.sendDocument(
            process.env.PAYMENT_GROUP_ID,
            {
              source: Buffer.from(paymentText),
              filename: `payment_${object.id}.txt`,
            },
            {
              caption: `–î–æ–∫—É–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è user_${user.userId}`,
            }
        );
        const paymentDocument = `https://t.me/c/${process.env.PAYMENT_GROUP_ID.split('-100')[1]}/${paymentDoc.message_id}`; // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

        await User.findOneAndUpdate(
            { userId: user.userId, paymentId: object.id },
            {
              paymentStatus: 'succeeded',
              joinedChannel: true,
              inviteLink: chatInvite.invite_link,
              inviteLinkExpires: expireDate,
              paymentDate: new Date(),
              paymentDocument, // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
            },
            { new: true }
        );
        await bot.telegram.sendMessage(
            user.chatId,
            '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞):',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: chatInvite.invite_link }]],
              },
            }
        );
        await bot.telegram.sendMessage(
            process.env.ADMIN_CHAT_ID,
            `–ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç user_${user.userId} (paymentId: ${object.id})`
        );
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await setSupportMenu(userId);
      } catch (error) {
        console.error('Error processing webhook:', error);
        await bot.telegram.sendMessage(
            user.chatId,
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
        );
      }
    }
  }
  res.sendStatus(200);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
bot.on('message', async (ctx) => {
  const userId = ctx.from.id.toString();
  const chatId = ctx.chat.id.toString();
  const { first_name, username, phone_number } = ctx.from;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
  let user = await User.findOne({ userId });
  if (!user) {
    try {
      user = await User.findOneAndUpdate(
          { userId },
          { userId, chatId, firstName: first_name, username, phoneNumber: phone_number },
          { upsert: true, new: true }
      );

      await setMainMenu(userId);
      await ctx.replyWithMarkdown(
          `*–ü—Ä–∏–≤–µ—Ç!* –Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Ç—É—Ç! üòä  
–ï—Å–ª–∏ —Ç—ã –ª—é—Ç–∞—è –º–æ–¥–Ω–∏—Ü–∞ –∏ —É—Å—Ç–∞–ª–∞ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞ —à–º–æ—Ç–∫–∏, –∂–¥—É —Ç–µ–±—è –≤ –º–æ–µ–º *–∑–∞–∫—Ä—ã—Ç–æ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ*!  
–î–∞–≤–∞–π —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–º–µ—Å—Ç–µ ‚ù§Ô∏è

**–ü–æ—á–µ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ?**
- üöö *–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞*
- üí∏ *–û–æ–æ–æ–æ—á–µ–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã*
- üì± *–í—Å–µ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ*`,
          {
            reply_markup: {
              inline_keyboard: [
                ...(userId === process.env.ADMIN_CHAT_ID ? [[{ text: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }]] : []),
              ],
            },
          }
      );
    } catch (error) {
      console.error('Error in first message:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
    }
  } else if (user.paymentStatus === 'succeeded' && user.joinedChannel) {
    await setSupportMenu(userId);
    await ctx.replyWithMarkdown(
        `*–ü—Ä–∏–≤–µ—Ç!* –Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Ç—É—Ç! üòä  
–ï—Å–ª–∏ —Ç—ã –ª—é—Ç–∞—è –º–æ–¥–Ω–∏—Ü–∞ –∏ —É—Å—Ç–∞–ª–∞ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞ —à–º–æ—Ç–∫–∏, –∂–¥—É —Ç–µ–±—è –≤ –º–æ–µ–º *–∑–∞–∫—Ä—ã—Ç–æ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ*!  
–î–∞–≤–∞–π —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–º–µ—Å—Ç–µ ‚ù§Ô∏è

**–ü–æ—á–µ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ?**
- üöö *–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞*
- üí∏ *–û–æ–æ–æ–æ—á–µ–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã*
- üì± *–í—Å–µ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ*`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' },
                { text: '–û –º–∞–≥–∞–∑–∏–Ω–µ', callback_data: 'about' },
              ],
            ],
          },
        }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
bot.start(async (ctx) => {
  await bot.on('message')(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.action('admin', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id.toString();
  if (userId !== process.env.ADMIN_CHAT_ID) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }

  try {
    await ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: '–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data: 'export_subscribers' }]],
      },
    });
  } catch (error) {
    console.error('Error in /admin:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
  }
});

bot.action('support', async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await ctx.replyWithMarkdown(
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: @YourSupportUsername –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ [–ø–æ—á—Ç—É](mailto:support@example.com).'
    );
  } catch (error) {
    console.error('Error in /support:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.action('about', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdown(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! üòä'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
bot.command('buy', async (ctx) => {
  const userId = ctx.from.id.toString();
  const chatId = ctx.chat.id.toString();

  try {
    const user = await User.findOne({ userId });
    if (user?.paymentStatus === 'succeeded' && user.inviteLink) {
      const now = Math.floor(Date.now() / 1000);
      await setSupportMenu(userId);
      if (user.inviteLinkExpires > now) {
        return ctx.reply('–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
          },
        });
      } else {
        return ctx.reply('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /renew_link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π.');
      }
    }

    const paymentId = uuidv4();
    const payment = await createPayment({
      amount: 399,
      description: '–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram –∫–∞–Ω–∞–ª—É',
      paymentId,
      userId,
      returnUrl: process.env.RETURN_URL, // –ò—Å–ø–æ–ª—å–∑—É–µ–º RETURN_URL –∏–∑ .env
    });

    await User.findOneAndUpdate(
        { userId },
        { paymentId, paymentStatus: 'pending', chatId },
        { upsert: true }
    );

    await ctx.reply('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: '–û–ø–ª–∞—Ç–∏—Ç—å', url: payment.confirmation.confirmation_url }]],
      },
    });
  } catch (error) {
    console.error('Payment error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
bot.command('check_payment', async (ctx) => {
  const userId = ctx.from.id.toString();
  try {
    const user = await User.findOne({ userId });
    if (!user) {
      return ctx.reply('–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã.');
    }
    if (user.paymentStatus === 'succeeded' && user.inviteLink) {
      const now = Math.floor(Date.now() / 1000);
      if (user.inviteLinkExpires > now) {
        return ctx.reply('–í–∞—à –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
          },
        });
      } else {
        return ctx.reply('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /renew_link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π.');
      }
    }
    return ctx.reply('–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  } catch (error) {
    console.error('Error in /check_payment:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç—ë–∫—à–µ–π —Å—Å—ã–ª–∫–∏
bot.command('renew_link', async (ctx) => {
  const userId = ctx.from.id.toString();
  try {
    const user = await User.findOne({ userId, paymentStatus: 'succeeded' });
    if (!user) {
      return ctx.reply('–í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∏–ª–∏ –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.');
    }
    const now = Math.floor(Date.now() / 1000);
    if (user.inviteLink && user.inviteLinkExpires > now) {
      return ctx.reply('–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –≤—Å—ë –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
        },
      });
    }
    const expireDate = Math.floor(Date.now() / 1000) + 24 * 60 * 60;
    const chatInvite = await ctx.telegram.createChatInviteLink(
        process.env.CHANNEL_ID,
        {
          name: `Invite for user_${userId}`,
          member_limit: 1,
          creates_join_request: false,
          expire_date: expireDate,
        }
    );
    await User.findOneAndUpdate(
        { userId },
        { inviteLink: chatInvite.invite_link, inviteLinkExpires: expireDate },
        { new: true }
    );
    return ctx.reply('–í–∞—à–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞):', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: chatInvite.invite_link }]],
      },
    });
  } catch (error) {
    console.error('Error in /renew_link:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
bot.action('export_subscribers', async (ctx) => {
  const userId = ctx.from.id.toString();
  if (userId !== process.env.ADMIN_CHAT_ID) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    const subscribers = await User.find({ paymentStatus: 'succeeded', joinedChannel: true });

    if (!subscribers.length) {
      return ctx.reply('–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.');
    }

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Subscribers');

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    worksheet.columns = [
      { header: 'Telegram ID', key: 'userId', width: 20 },
      { header: '–ò–º—è', key: 'firstName', width: 20 },
      { header: 'Telegram-–∏–º—è', key: 'username', width: 20 },
      { header: '–¢–µ–ª–µ—Ñ–æ–Ω', key: 'phoneNumber', width: 15 },
      { header: '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', key: 'paymentDate', width: 20 },
      { header: '–ü–ª–∞—Ç–µ–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', key: 'paymentDocument', width: 30 }, // –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    ];

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    worksheet.getRow(1).font = { bold: true };
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFADD8E6' },
    };
    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    subscribers.forEach((sub) => {
      worksheet.addRow({
        userId: sub.userId,
        firstName: sub.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        username: sub.username ? `@${sub.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        phoneNumber: sub.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        paymentDate: sub.paymentDate ? sub.paymentDate.toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        paymentDocument: sub.paymentDocument || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      });
    });

    // –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    worksheet.columns.forEach((column) => {
      let maxLength = 0;
      column.eachCell({ includeEmpty: true }, (cell) => {
        const columnLength = cell.value ? cell.value.toString().length : 10;
        if (columnLength > maxLength) {
          maxLength = columnLength;
        }
      });
      column.width = maxLength < 10 ? 10 : maxLength;
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const buffer = await workbook.xlsx.write();
    const fileName = `Subscribers_${new Date().toISOString().slice(0, 10)}.xlsx`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    await ctx.replyWithDocument(
        { source: buffer, filename: fileName },
        { caption: '–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' }
    );
  } catch (error) {
    console.error('Error exporting subscribers:', error);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`Server running on port ${PORT}`);
  await bot.telegram.setWebhook(`https://${process.env.RENDER_URL}/bot${process.env.BOT_TOKEN}`);
  console.log('Webhook set');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once('SIGINT', () => {
  console.log('SIGINT received, stopping bot');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('SIGTERM received, stopping bot');
  bot.stop('SIGTERM');
});