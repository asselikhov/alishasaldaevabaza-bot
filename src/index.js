const { Telegraf, session: telegrafSession } = require('telegraf');
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');
const express = require('express');
const ExcelJS = require('exceljs');
const crypto = require('crypto');
require('dotenv').config();

const app = express();

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è raw body –¥–ª—è –≤–µ–±—Ö—É–∫–∞ YooKassa
app.use('/webhook/yookassa', express.raw({ type: 'application/json' }));
app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] Received ${req.method} request at ${req.path}`);
  console.log('Request body:', req.body ? JSON.stringify(req.body) : 'No body');
  next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['BOT_TOKEN', 'MONGODB_URI', 'YOOKASSA_SHOP_ID', 'YOOKASSA_SECRET_KEY', 'CHANNEL_ID', 'PAYMENT_GROUP_ID', 'ADMIN_CHAT_IDS', 'RETURN_URL'];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    console.error(`${envVar} is not defined in environment variables`);
    process.exit(1);
  }
}
console.log('All required environment variables are set');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mongoose
mongoose.set('strictQuery', true);
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Connected to MongoDB via Mongoose'))
    .catch(err => {
      console.error('MongoDB connection error:', err.message);
      console.warn('Falling back to in-memory session storage');
    });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.catch((err, ctx) => {
  console.error('Telegraf global error for update', ctx.update, ':', err.message);
  if (ctx) ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Å–µ—Å—Å–∏–∏
bot.use(telegrafSession());

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  userId: String,
  chatId: String,
  paymentStatus: { type: String, default: 'pending' },
  paymentId: String,
  localPaymentId: String, // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ID
  joinedChannel: { type: Boolean, default: false },
  inviteLink: String,
  inviteLinkExpires: Number,
  firstName: String,
  username: String,
  phoneNumber: String,
  email: String,
  paymentDate: Date,
  paymentDocument: { type: String, default: null },
  lastActivity: { type: Date, default: Date.now },
});

const User = mongoose.model('User', UserSchema);

// –°—Ö–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SettingsSchema = new mongoose.Schema({
  channelDescription: { type: String, default: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! üòä' },
  supportLink: { type: String, default: 'https://t.me/Eagleshot' },
  welcomeMessage: { type: String, default: '–ô–û–£ –ß–ò–ö–°–´ üòé\n\n–Ø —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å, –ª—é—Ç—ã–µ –º–æ–¥–Ω–∏—Ü—ã üíÖ\n\n–î–µ—Ä–∂–∏—Ç–µ –º–µ–Ω—è —Å–µ–º–µ—Ä–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è –≤–∞—Å –Ω–∞—É—á—É –ø–∏–ø—ç—Ü –∫–∞–∫ –≤—ã–≥–æ–¥–Ω–æ –±—Ä–∞—Ç—å —à–º–æ—Ç—å—ëü§≠ü§´\n\n–ñ–¥—É –≤–∞—Å –≤ —Å–≤–æ—ë–º –∫–ª—É–±–µ —à–∞–±–æ–ª—è—Ç–Ω–∏—Ü ü§ù‚ù§Ô∏è' },
  paymentAmount: { type: Number, default: 399 }, // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
});

const Settings = mongoose.model('Settings', SettingsSchema);

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminIds = new Set((process.env.ADMIN_CHAT_IDS || '').split(',').map(id => id.trim()));
console.log('Parsed adminIds:', [...adminIds]);

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ YooKassa (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
function validateYookassaWebhook(req) {
  console.log('[WEBHOOK] Raw body (buffer):', req.body);
  console.log('[WEBHOOK] Raw body (utf8):', req.body.toString('utf8'));
  const signatureHeader = req.headers['signature'];
  if (!signatureHeader) {
    console.error('[WEBHOOK] YooKassa webhook validation failed: Missing signature header');
    return false;
  }

  const parts = signatureHeader.split(' ');
  if (parts.length < 4 || parts[0] !== 'v1') {
    console.error('[WEBHOOK] YooKassa webhook validation failed: Invalid signature format');
    return false;
  }

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
  console.log('[WEBHOOK] Temporarily skipping signature validation');
  return true; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ—Ç YooKassa
}

// –Ø–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.post(`/bot${process.env.BOT_TOKEN}`, async (req, res) => {
  console.log(`[${new Date().toISOString()}] Webhook endpoint hit with body:`, JSON.stringify(req.body));
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('OK');
  } catch (err) {
    console.error('Error handling webhook update:', err.message);
    res.status(500).send('Error processing webhook');
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞ –æ—Ç UptimeRobot
app.all('/ping', (req, res) => {
  console.log(`[${new Date().toISOString()}] Received ${req.method} ping from UptimeRobot or other service`);
  res.status(200).send('Bot is awake!');
});

// –ÆKassa –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const { createPayment, getPayment } = require('./yookassa');

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
let cachedSettings = null;

async function getSettings() {
  if (!cachedSettings) {
    cachedSettings = await Settings.findOne() || new Settings();
  }
  return cachedSettings;
}

// –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function getWelcomeMessage() {
  const settings = await getSettings();
  return settings.welcomeMessage;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
async function sendInviteLink(user, ctx, paymentId) {
  try {
    console.log(`[INVITE] Processing invite link for user ${user.userId}, paymentId: ${paymentId}`);
    if (user.inviteLink) {
      console.log(`[INVITE] User ${user.userId} already has a valid invite link: ${user.inviteLink}`);
      await bot.telegram.sendMessage(
          user.chatId,
          '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –í–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ:',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
            },
          }
      );
      return;
    }

    const chatInvite = await bot.telegram.createChatInviteLink(
        process.env.CHANNEL_ID,
        {
          name: `Invite for user_${user.userId}`,
          member_limit: 1,
          creates_join_request: false,
        }
    );
    console.log(`[INVITE] Created invite link: ${chatInvite.invite_link} for user ${user.userId}`);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ YooKassa
    const paymentData = await getPayment(paymentId);
    if (paymentData.status !== 'succeeded') {
      throw new Error(`[INVITE] Payment ${paymentId} status is ${paymentData.status}, expected succeeded`);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ YooKassa
    const paymentText = `–ü–ª–∞—Ç–µ–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n` +
        `ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${paymentId}\n` +
        `–°—É–º–º–∞: ${paymentData.amount.value} ${paymentData.amount.currency}\n` +
        `–î–∞—Ç–∞: ${new Date(paymentData.created_at).toLocaleString('ru-RU')}\n` +
        `–°—Ç–∞—Ç—É—Å: ${paymentData.status}\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.userId}\n` +
        `Email: ${paymentData.receipt?.customer?.email || user.email || 'N/A'}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    const paymentDoc = await bot.telegram.sendDocument(
        process.env.PAYMENT_GROUP_ID,
        {
          source: Buffer.from(paymentText),
          filename: `payment_${paymentId}.txt`,
        },
        {
          caption: `–î–æ–∫—É–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è user_${user.userId}`,
        }
    );
    console.log(`[INVITE] Payment document sent to group ${process.env.PAYMENT_GROUP_ID}, message_id: ${paymentDoc.message_id}`);

    const paymentDocument = `https://t.me/c/${process.env.PAYMENT_GROUP_ID.replace('-100', '')}/${paymentDoc.message_id}`;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.updateOne(
        { userId: user.userId, paymentId },
        {
          paymentStatus: 'succeeded',
          joinedChannel: true,
          inviteLink: chatInvite.invite_link,
          inviteLinkExpires: null,
          paymentDate: new Date(paymentData.created_at),
          paymentDocument,
          lastActivity: new Date(),
        }
    );
    console.log(`[INVITE] User ${user.userId} updated with invite link and payment details`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.telegram.sendMessage(
        user.chatId,
        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: chatInvite.invite_link }]],
          },
        }
    );
    console.log(`[INVITE] Invite link sent to user ${user.userId}`);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for (const adminId of adminIds) {
      await bot.telegram.sendMessage(
          adminId,
          `–ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç user_${user.userId} (paymentId: ${paymentId}). –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${chatInvite.invite_link}`
      );
    }
    console.log(`[INVITE] Admin notification sent for user ${user.userId}`);
  } catch (error) {
    console.error(`[INVITE] Error sending invite link for user ${user.userId}:`, error.message, error.stack);
    await bot.telegram.sendMessage(
        user.chatId,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
        {
          reply_markup: {
            inline_keyboard: [[{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }]],
          },
        }
    );
    for (const adminId of adminIds) {
      await bot.telegram.sendMessage(
          adminId,
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è user_${user.userId} (paymentId: ${paymentId}): ${error.message}`
      );
    }
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /checkpayment
bot.command('checkpayment', async (ctx) => {
  const userId = String(ctx.from.id);
  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    const user = await User.findOne({ userId });
    if (!user || !user.paymentId) {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.');
    }

    if (user.paymentStatus === 'succeeded' && user.inviteLink) {
      return ctx.reply('–í–∞—à –ø–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
        },
      });
    }

    const payment = await getPayment(user.paymentId);
    if (payment.status === 'succeeded') {
      await sendInviteLink(user, ctx, user.paymentId);
    } else {
      await ctx.reply(`–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${payment.status}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`, {
        reply_markup: {
          inline_keyboard: [[{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }]],
        },
      });
    }
  } catch (error) {
    console.error(`Error in /checkpayment for user ${userId}:`, error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }]],
      },
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  console.log(`Received /start command from ${ctx.from.id}`);
  const userId = String(ctx.from.id);
  const chatId = String(ctx.chat.id);
  const { first_name: firstName, username, phone_number: phoneNumber } = ctx.from;

  try {
    console.log(`Processing /start for userId: ${userId}`);
    let user = await User.findOne({ userId });
    console.log(`User found or to be created: ${user ? 'exists' : 'new'}`);
    if (!user) {
      console.log(`Creating new user: ${userId}`);
      user = await User.create({
        userId,
        chatId,
        firstName,
        username,
        phoneNumber,
        lastActivity: new Date(),
      });
      console.log(`User created: ${JSON.stringify(user)}`);
    } else {
      await User.updateOne({ userId }, { lastActivity: new Date() });
    }

    const settings = await getSettings();
    console.log(`Sending reply to ${userId}`);
    ctx.session = ctx.session || {};
    ctx.session.navHistory = ctx.session.navHistory || [];
    const replyMarkup = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: `üî• –ö—É–ø–∏—Ç—å –∑–∞ ${settings.paymentAmount}—Ä.`, callback_data: 'buy' },
            { text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: settings.supportLink },
          ],
          ...(adminIds.has(userId) ? [[
            { text: 'üëë –ê–¥–º–∏–Ω–∫–∞', callback_data: 'admin_panel' },
            { text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' },
          ]] : [[{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }]]),
        ],
      },
    };
    await ctx.replyWithMarkdown(await getWelcomeMessage(), replyMarkup);
    console.log(`Reply sent to ${userId}`);
  } catch (error) {
    console.error(`Error in /start for user ${userId}:`, error.message);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üëë –ê–¥–º–∏–Ω–∫–∞"
bot.action('admin_panel', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.navHistory = ctx.session.navHistory || [];
    ctx.session.navHistory.push('start');
    await ctx.editMessageText('–ê–¥–º–∏–Ω–∫–∞:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit' }],
          [{ text: '–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data: 'export_subscribers' }],
          [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }],
        ],
      },
    });
  } catch (error) {
    console.error(`Error in admin panel for user ${userId}:`, error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
bot.action('stats', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });

    const totalUsers = await User.countDocuments();
    const paidUsers = await User.countDocuments({ paymentStatus: 'succeeded' });
    const activeUsersLast24h = await User.find({
      lastActivity: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) },
    }).select('firstName username userId');

    let activeUsersList = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.';
    if (activeUsersLast24h.length > 0) {
      activeUsersList = activeUsersLast24h
          .map((user, index) => {
            const username = user.username ? `@${user.username}` : '';
            return `${index + 1}. ${user.firstName} (${username}, ID: ${user.userId})`.trim();
          })
          .join('\n');
    }

    const statsMessage = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚û∂‚ûñ‚ûñ
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers} | –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${paidUsers}

–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:
${activeUsersList}
    `;

    ctx.session = ctx.session || {};
    ctx.session.navHistory = ctx.session.navHistory || [];
    ctx.session.navHistory.push('admin_panel');

    await ctx.editMessageText(statsMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }]],
      },
    });
  } catch (error) {
    console.error(`Error in stats for user ${userId}:`, error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
bot.action('export_subscribers', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    const users = await User.find({ paymentStatus: 'succeeded' }).lean();
    if (!users.length) {
      return ctx.reply('–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.');
    }

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Subscribers', {
      properties: { defaultRowHeight: 20 },
    });

    worksheet.columns = [
      { header: 'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', key: 'userId', width: 20 },
      { header: 'ID –ß–∞—Ç–∞', key: 'chatId', width: 20 },
      { header: '–°—Ç–∞—Ç—É—Å –ü–ª–∞—Ç–µ–∂–∞', key: 'paymentStatus', width: 15 },
      { header: 'ID –ü–ª–∞—Ç–µ–∂–∞', key: 'paymentId', width: 30 },
      { header: '–õ–æ–∫–∞–ª—å–Ω—ã–π ID –ü–ª–∞—Ç–µ–∂–∞', key: 'localPaymentId', width: 30 },
      { header: '–í—Å—Ç—É–ø–∏–ª –≤ –ö–∞–Ω–∞–ª', key: 'joinedChannel', width: 15 },
      { header: '–°—Å—ã–ª–∫–∞ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', key: 'inviteLink', width: 40 },
      { header: '–°—Ä–æ–∫ –°—Å—ã–ª–∫–∏', key: 'inviteLinkExpires', width: 15 },
      { header: '–ò–º—è', key: 'firstName', width: 20 },
      { header: 'Username', key: 'username', width: 20 },
      { header: '–¢–µ–ª–µ—Ñ–æ–Ω', key: 'phoneNumber', width: 15 },
      { header: 'Email', key: 'email', width: 30 },
      { header: '–î–∞—Ç–∞ –ü–ª–∞—Ç–µ–∂–∞', key: 'paymentDate', width: 20 },
      { header: '–î–æ–∫—É–º–µ–Ω—Ç –ü–ª–∞—Ç–µ–∂–∞', key: 'paymentDocument', width: 40 },
      { header: '–ü–æ—Å–ª–µ–¥–Ω—è—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', key: 'lastActivity', width: 20 },
    ];

    worksheet.getRow(1).font = { bold: true, size: 12 };
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFADD8E6' },
    };
    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };
    worksheet.getRow(1).height = 30;

    users.forEach(user => {
      worksheet.addRow({
        userId: user.userId || 'N/A',
        chatId: user.chatId || 'N/A',
        paymentStatus: user.paymentStatus || 'N/A',
        paymentId: user.paymentId || 'N/A',
        localPaymentId: user.localPaymentId || 'N/A',
        joinedChannel: user.joinedChannel ? '–î–∞' : '–ù–µ—Ç',
        inviteLink: user.inviteLink || 'N/A',
        inviteLinkExpires: user.inviteLinkExpires ? new Date(user.inviteLinkExpires).toLocaleString('ru-RU') : '–ë–µ–∑ —Å—Ä–æ–∫–∞',
        firstName: user.firstName || 'N/A',
        username: user.username ? `@${user.username}` : 'N/A',
        phoneNumber: user.phoneNumber || 'N/A',
        email: user.email || 'N/A',
        paymentDate: user.paymentDate ? user.paymentDate.toLocaleString('ru-RU') : 'N/A',
        paymentDocument: user.paymentDocument || 'N/A',
        lastActivity: user.lastActivity ? user.lastActivity.toLocaleString('ru-RU') : 'N/A',
      });
    });

    worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      if (rowNumber > 1) {
        row.font = { size: 11 };
        row.alignment = { vertical: 'middle', horizontal: 'left', wrapText: true };
        row.height = 25;
      }
    });

    ['M', 'O'].forEach(col => {
      worksheet.getColumn(col).numFmt = 'dd.mm.yyyy hh:mm:ss';
    });

    worksheet.columns.forEach(column => {
      let maxLength = 0;
      column.eachCell({ includeEmpty: true }, cell => {
        const cellLength = cell.value ? String(cell.value).length : 10;
        maxLength = Math.max(maxLength, cellLength);
      });
      column.width = Math.min(maxLength + 2, 50);
    });

    const buffer = await workbook.xlsx.writeBuffer();
    await ctx.replyWithDocument({
      source: buffer,
      filename: `subscribers_${new Date().toISOString().split('T')[0]}.xlsx`,
    });
  } catch (error) {
    console.error(`Error in export_subscribers for user ${userId}:`, error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
bot.action('back', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.navHistory = ctx.session.navHistory || [];
    const lastAction = ctx.session.navHistory.pop() || 'start';

    if (lastAction === 'start') {
      const settings = await getSettings();
      const replyMarkup = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: `üî• –ö—É–ø–∏—Ç—å –∑–∞ ${settings.paymentAmount}—Ä.`, callback_data: 'buy' },
              { text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: settings.supportLink },
            ],
            ...(adminIds.has(userId) ? [[
              { text: 'üëë –ê–¥–º–∏–Ω–∫–∞', callback_data: 'admin_panel' },
              { text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' },
            ]] : [[{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }]]),
          ],
        },
      };
      await ctx.editMessageText(await getWelcomeMessage(), {
        parse_mode: 'Markdown',
        reply_markup: replyMarkup.reply_markup,
      });
    } else if (lastAction === 'admin_panel') {
      await ctx.editMessageText('–ê–¥–º–∏–Ω–∫–∞:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit' }],
            [{ text: '–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data: 'export_subscribers' }],
            [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }],
          ],
        },
      });
    }
  } catch (error) {
    console.error(`Error in back for user ${userId}:`, error.stack);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
bot.action('edit', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.navHistory = ctx.session.navHistory || [];
    ctx.session.navHistory.push('admin_panel');
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û –∫–∞–Ω–∞–ª', callback_data: 'edit_channel' }],
          [{ text: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'edit_support' }],
          [{ text: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data: 'edit_welcome' }],
          [{ text: '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã', callback_data: 'edit_payment_amount' }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }],
        ],
      },
    });
  } catch (error) {
    console.error(`Error in edit for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –∫–∞–Ω–∞–ª–µ" (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
bot.action('edit_channel', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.editing = 'channelDescription';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:');
  } catch (error) {
    console.error(`Error in edit_channel for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
bot.action('edit_support', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.editing = 'supportLink';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram-username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @Username) –∏–ª–∏ URL —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:');
  } catch (error) {
    console.error(`Error in edit_support for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
bot.action('edit_welcome', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.editing = 'welcomeMessage';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
  } catch (error) {
    console.error(`Error in edit_welcome for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã" (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
bot.action('edit_payment_amount', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.has(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.editing = 'paymentAmount';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 499):');
  } catch (error) {
    console.error(`Error in edit_payment_amount for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ email
bot.on('text', async (ctx) => {
  const userId = String(ctx.from.id);
  ctx.session = ctx.session || {};

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    const text = ctx.message.text.trim();

    if (ctx.session.waitingForEmail) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(text)) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@example.com):');
      }
      await User.updateOne({ userId }, { email: text });
      ctx.session.waitingForEmail = false;
      await ctx.reply('Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞...');
      return await processPayment(ctx, userId, String(ctx.chat.id));
    }

    if (!adminIds.has(userId) || !ctx.session.editing) {
      return;
    }

    if (ctx.session.editing === 'channelDescription') {
      if (text.length < 10) {
        return ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
      cachedSettings = await Settings.findOneAndUpdate(
          {},
          { channelDescription: text },
          { upsert: true, new: true }
      );
      ctx.session.editing = null;
      await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    } else if (ctx.session.editing === 'supportLink') {
      let supportLink = text;
      if (supportLink.startsWith('@')) {
        supportLink = `https://t.me/${supportLink.slice(1)}`;
      } else if (!supportLink.match(/^https?:\/\//)) {
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –∏–ª–∏ Telegram-username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @Username). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
      cachedSettings = await Settings.findOneAndUpdate(
          {},
          { supportLink },
          { upsert: true, new: true }
      );
      ctx.session.editing = null;
      await ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    } else if (ctx.session.editing === 'welcomeMessage') {
      if (text.length < 10) {
        return ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
      cachedSettings = await Settings.findOneAndUpdate(
          {},
          { welcomeMessage: text },
          { upsert: true, new: true }
      );
      ctx.session.editing = null;
      await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    } else if (ctx.session.editing === 'paymentAmount') {
      const amount = parseFloat(text);
      if (isNaN(amount) || amount <= 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 499):');
      }
      cachedSettings = await Settings.findOneAndUpdate(
          {},
          { paymentAmount: amount },
          { upsert: true, new: true }
      );
      ctx.session.editing = null;
      await ctx.reply(`–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${amount} —Ä—É–±.!`);
    }
  } catch (error) {
    console.error(`Error processing text input for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
async function processPayment(ctx, userId, chatId) {
  try {
    console.log(`YOOKASSA_SHOP_ID: ${process.env.YOOKASSA_SHOP_ID}, YOOKASSA_SECRET_KEY: ${process.env.YOOKASSA_SECRET_KEY ? 'present' : 'missing'}`);
    const user = await User.findOne({ userId });
    if (user?.paymentStatus === 'succeeded' && user.inviteLink) {
      return ctx.reply('–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø! –í–æ—Ç –≤–∞—à–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
        },
      });
    }

    const settings = await getSettings();
    const localPaymentId = uuidv4();
    console.log(`Creating payment for user ${userId}, localPaymentId: ${localPaymentId}`);
    const payment = await Promise.race([
      createPayment({
        amount: settings.paymentAmount,
        description: '–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram –∫–∞–Ω–∞–ª—É',
        paymentId: localPaymentId,
        userId,
        returnUrl: `${process.env.RETURN_URL}?paymentId=${localPaymentId}`,
        email: user.email,
      }),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout waiting for Yookassa response')), 15000))
    ]);

    await User.updateOne(
        { userId },
        { paymentId: payment.id, localPaymentId, paymentStatus: 'pending', chatId, lastActivity: new Date() },
        { upsert: true }
    );

    await ctx.reply('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: '–û–ø–ª–∞—Ç–∏—Ç—å', url: payment.confirmation.confirmation_url }]],
      },
    });
  } catch (error) {
    console.error(`Payment error for user ${userId}:`, error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }]],
      },
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
bot.action('buy', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  const chatId = String(ctx.chat.id);

  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    const user = await User.findOne({ userId });
    if (!user.email) {
      ctx.session = ctx.session || {};
      ctx.session.waitingForEmail = true;
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:');
      return;
    }
    await processPayment(ctx, userId, chatId);
  } catch (error) {
    console.error(`Error in buy for user ${userId}:`, error.message);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –∫–∞–Ω–∞–ª–µ"
bot.action('about', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  try {
    await User.updateOne({ userId }, { lastActivity: new Date() });
    const settings = await getSettings();
    try {
      await ctx.editMessageText(settings.channelDescription, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }]],
        },
      });
    } catch (editError) {
      console.warn(`Failed to edit message for user ${userId}:`, editError.message);
      await ctx.replyWithMarkdown(settings.channelDescription, {
        reply_markup: {
          inline_keyboard: [[{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back' }]],
        },
      });
    }
  } catch (error) {
    console.error(`Error in about for user ${userId}:`, error.stack);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
app.get('/', (req, res) => {
  res.send('–≠—Ç–æ API –±–æ—Ç–∞ alishasaldaevabaza-bot. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health –∏–ª–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–æ—Ç—É –≤ Telegram.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –ÆKassa
app.get('/return', async (req, res) => {
  console.log('Received /return request with query:', req.query);
  const { paymentId: localPaymentId } = req.query;
  if (localPaymentId) {
    try {
      const user = await User.findOne({ localPaymentId });
      if (user) {
        const payment = await getPayment(user.paymentId);
        if (payment.status === 'succeeded') {
          await sendInviteLink(user, { chat: { id: user.chatId } }, user.paymentId);
        } else {
          await bot.telegram.sendMessage(user.chatId, `–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${payment.status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /checkpayment –ø–æ–∑–∂–µ.`);
        }
      } else {
        console.warn(`No user found for localPaymentId: ${localPaymentId}`);
      }
    } catch (error) {
      console.error('Error processing /return:', error.stack);
    }
  }
  res.send('–û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.');
});

// Health check –¥–ª—è Render
app.get('/health', (req, res) => res.sendStatus(200));

// –í–µ–±—Ö—É–∫ –¥–ª—è –ÆKassa
app.post('/webhook/yookassa', async (req, res) => {
  try {
    console.log(`[WEBHOOK] Received YooKassa webhook at ${new Date().toISOString()} with headers:`, req.headers);
    if (!validateYookassaWebhook(req)) {
      console.error('[WEBHOOK] Invalid YooKassa webhook signature (skipped for now)');
      return res.status(200).send('OK'); // –û—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    }

    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∫–∞–∫ JSON
    const body = JSON.parse(req.body.toString('utf8'));
    console.log('[WEBHOOK] Parsed YooKassa webhook body:', JSON.stringify(body));

    const { event, object } = body;
    if (event === 'payment.succeeded') {
      console.log(`[WEBHOOK] Processing payment.succeeded for paymentId: ${object.id}`);
      const user = await User.findOne({ paymentId: object.id });
      if (user) {
        console.log(`[WEBHOOK] Found user ${user.userId} for paymentId ${object.id}, joinedChannel: ${user.joinedChannel}`);
        if (!user.joinedChannel) {
          console.log(`[WEBHOOK] Sending invite link for user ${user.userId}`);
          await sendInviteLink(user, { chat: { id: user.chatId } }, object.id);
        } else {
          console.log(`[WEBHOOK] User ${user.userId} already joined, skipping invite link`);
        }
      } else {
        console.warn(`[WEBHOOK] No user found for paymentId: ${object.id}`);
        for (const adminId of adminIds) {
          await bot.telegram.sendMessage(
              adminId,
              `–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è paymentId: ${object.id}`
          );
        }
      }
    } else {
      console.log(`[WEBHOOK] Received unhandled event: ${event}`);
    }
    res.sendStatus(200);
  } catch (error) {
    console.error('[WEBHOOK] Error in Yookassa webhook:', error.message, error.stack);
    res.sendStatus(200); // –ÆKassa –æ–∂–∏–¥–∞–µ—Ç 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
console.log(`Starting server on port ${PORT}`);
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});