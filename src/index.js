const { Telegraf, session } = require('telegraf');
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');
const express = require('express');
const ExcelJS = require('exceljs');
require('dotenv').config();

const app = express();
app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] Received ${req.method} request at ${req.path}`);
  if (req.body) console.log('Request body:', JSON.stringify(req.body));
  next();
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err.stack));

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  userId: String,
  chatId: String,
  paymentStatus: { type: String, default: 'pending' },
  paymentId: String,
  joinedChannel: { type: Boolean, default: false },
  inviteLink: String,
  inviteLinkExpires: Number,
  firstName: String,
  username: String,
  phoneNumber: String,
  paymentDate: Date,
  paymentDocument: { type: String, default: null },
  lastActivity: { type: Date, default: Date.now },
});

const User = mongoose.model('User', UserSchema);

// –°—Ö–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SettingsSchema = new mongoose.Schema({
  channelDescription: { type: String, default: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! üòä' },
  supportLink: { type: String, default: 'https://t.me/Eagleshot' },
});

const Settings = mongoose.model('Settings', SettingsSchema);

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const adminIds = (process.env.ADMIN_CHAT_IDS || '').split(',').map(id => String(id.trim()));
console.log('Parsed adminIds:', adminIds);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
console.log('Initializing Telegraf bot with token:', process.env.BOT_TOKEN ? 'Token present' : 'Token missing');
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());
bot.catch((err, ctx) => {
  console.error('Telegraf global error for update', ctx?.update, ':', err.stack);
  if (ctx) ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –Ø–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app.post(`/bot${process.env.BOT_TOKEN}`, async (req, res) => {
  console.log(`[${new Date().toISOString()}] Webhook endpoint hit with body:`, JSON.stringify(req.body));
  try {
    await bot.handleUpdate(req.body);
    res.status(200).send('OK');
  } catch (err) {
    console.error('Error handling webhook update:', err.stack);
    res.status(500).send('Error processing webhook');
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞ –æ—Ç UptimeRobot
app.all('/ping', (req, res) => {
  console.log(`[${new Date().toISOString()}] Received ${req.method} ping from UptimeRobot or other service`);
  res.status(200).send('Bot is awake!');
});

// –ÆKassa –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const { createPayment } = require('./yookassa');

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
let cachedSettings = null;

async function getSettings() {
  if (!cachedSettings) {
    cachedSettings = await Settings.findOne() || new Settings();
  }
  return cachedSettings;
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const setMainMenu = async (ctx) => {
  try {
    const userId = String(ctx.from.id);
    console.log(`Setting main menu for userId: ${userId}, adminIds: ${JSON.stringify(adminIds)}, isAdmin: ${adminIds.includes(userId)}`);
    const isAdmin = adminIds.includes(userId);

    if (isAdmin) {
      const keyboard = {
        reply_markup: {
          keyboard: [[{ text: 'üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }]],
          resize_keyboard: true,
          persistent: true,
        },
      };
      console.log(`Sending keyboard to user ${userId}:`, JSON.stringify(keyboard));
      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', keyboard);
    } else {
      await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    }
    console.log(`Main menu set successfully for userId: ${userId}`);
  } catch (error) {
    console.error(`Error setting main menu for userId ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ–Ω—é.');
  }
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.command('adminmenu', async (ctx) => {
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }
  await setMainMenu(ctx);
  await ctx.reply('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.');
});

// –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const getWelcomeMessage = () => {
  return `–ü—Ä–∏–≤–µ—Ç! –Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Ç—É—Ç! –ï—Å–ª–∏ —Ç—ã –ª—é—Ç–∞—è –º–æ–¥–Ω–∏—Ü–∞ –∏ —É—Å—Ç–∞–ª–∞ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞ —à–º–æ—Ç–∫–∏, –∂–¥—É —Ç–µ–±—è –≤ –º–æ–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ! –î–∞–≤–∞–π —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–º–µ—Å—Ç–µ‚ù§Ô∏è

–ü–û–ß–ï–ú–£ –≠–¢–û –í–´–ì–û–î–ù–û?

- –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
- –æ–æ–æ–æ–æ—á–µ–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã
- –≤—Å–µ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ`;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  console.log(`Received /start command from ${ctx.from.id}`);
  const userId = String(ctx.from.id);
  const chatId = String(ctx.chat.id);
  const { first_name, username, phone_number } = ctx.from;

  try {
    console.log(`Processing /start for userId: ${userId}`);
    let user = await User.findOne({ userId });
    console.log(`User found or to be created: ${user ? 'exists' : 'new'}`);
    if (!user) {
      console.log(`Creating new user: ${userId}`);
      user = await User.findOneAndUpdate(
          { userId },
          { userId, chatId, firstName: first_name, username, phoneNumber: phone_number, lastActivity: new Date() },
          { upsert: true, new: true }
      );
      console.log(`User created: ${JSON.stringify(user)}`);
    } else {
      await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    }
    await setMainMenu(ctx);

    const settings = await getSettings();
    console.log(`Sending reply to ${userId}`);
    await ctx.replyWithMarkdown(
        getWelcomeMessage(),
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üî• –ö—É–ø–∏—Ç—å', callback_data: 'buy' },
                { text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: settings.supportLink },
              ],
              [{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }],
            ],
          },
        }
    );
    console.log(`Reply sent to ${userId}`);
  } catch (error) {
    console.error(`Error in /start for user ${userId}:`, error.stack);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
bot.hears('üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', async (ctx) => {
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    await setMainMenu(ctx); // –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é
    await ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit' }],
          [{ text: '–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data: 'export_subscribers' }],
          [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }],
        ],
      },
    });
  } catch (error) {
    console.error(`Error in admin panel for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
bot.action('edit', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û –∫–∞–Ω–∞–ª–µ', callback_data: 'edit_channel' }],
          [{ text: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'edit_support' }],
        ],
      },
    });
  } catch (error) {
    console.error(`Error in edit for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –∫–∞–Ω–∞–ª–µ" (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
bot.action('edit_channel', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.editing = 'channelDescription';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:');
  } catch (error) {
    console.error(`Error in edit_channel for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
bot.action('edit_support', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    ctx.session = ctx.session || {};
    ctx.session.editing = 'supportLink';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram-username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @Username) –∏–ª–∏ URL —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:');
  } catch (error) {
    console.error(`Error in edit_support for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Å—ã–ª–∫–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot.on('text', async (ctx) => {
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId) || !ctx.session?.editing) {
    return;
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    const text = ctx.message.text.trim();
    if (ctx.session.editing === 'channelDescription') {
      if (text.length < 10) {
        return ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
      cachedSettings = await Settings.findOneAndUpdate(
          {},
          { channelDescription: text },
          { upsert: true, new: true }
      );
      ctx.session.editing = null;
      await ctx.reply('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    } else if (ctx.session.editing === 'supportLink') {
      let supportLink = text;
      if (supportLink.startsWith('@')) {
        supportLink = `https://t.me/${supportLink.slice(1)}`;
      } else if (!supportLink.startsWith('http://') && !supportLink.startsWith('https://')) {
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL –∏–ª–∏ Telegram-username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @Username). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
      }
      cachedSettings = await Settings.findOneAndUpdate(
          {},
          { supportLink },
          { upsert: true, new: true }
      );
      ctx.session.editing = null;
      await ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    }
  } catch (error) {
    console.error(`Error processing text input for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
bot.action('export_subscribers', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    const subscribers = await User.find({ paymentStatus: 'succeeded', joinedChannel: true });

    if (!subscribers.length) {
      return ctx.reply('–ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.');
    }

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Subscribers');

    worksheet.columns = [
      { header: 'Telegram ID', key: 'userId', width: 20 },
      { header: '–ò–º—è', key: 'firstName', width: 20 },
      { header: 'Telegram-–∏–º—è', key: 'username', width: 20 },
      { header: '–¢–µ–ª–µ—Ñ–æ–Ω', key: 'phoneNumber', width: 15 },
      { header: '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', key: 'paymentDate', width: 20 },
      { header: '–ü–ª–∞—Ç–µ–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', key: 'paymentDocument', width: 30 },
    ];

    worksheet.getRow(1).font = { bold: true };
    worksheet.getRow(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFADD8E6' } };
    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };

    subscribers.forEach((sub) => {
      worksheet.addRow({
        userId: sub.userId,
        firstName: sub.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        username: sub.username ? `@${sub.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        phoneNumber: sub.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        paymentDate: sub.paymentDate ? sub.paymentDate.toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        paymentDocument: sub.paymentDocument || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      });
    });

    worksheet.columns.forEach((column) => {
      let maxLength = 0;
      column.eachCell({ includeEmpty: true }, (cell) => {
        const columnLength = cell.value ? cell.value.toString().length : 10;
        if (columnLength > maxLength) {
          maxLength = columnLength;
        }
      });
      column.width = maxLength < 10 ? 10 : maxLength;
    });

    const buffer = await workbook.xlsx.write();
    const fileName = `Subscribers_${new Date().toISOString().slice(0, 10)}.xlsx`;

    await ctx.replyWithDocument(
        { source: buffer, filename: fileName },
        { caption: '–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' }
    );
  } catch (error) {
    console.error(`Error exporting subscribers for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
bot.action('stats', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  if (!adminIds.includes(userId)) {
    return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    const totalUsers = await User.countDocuments();
    const paidSubscribers = await User.countDocuments({ paymentStatus: 'succeeded', joinedChannel: true });
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const recentVisitors = await User.find({ lastActivity: { $gte: oneDayAgo } }).select('userId firstName username');

    let visitorsList = '–°–ø–∏—Å–æ–∫ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n';
    if (recentVisitors.length === 0) {
      visitorsList += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏';
    } else {
      visitorsList += recentVisitors.map((visitor, index) =>
          `${index + 1}. ${visitor.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} (@${visitor.username || '–±–µ–∑ username'}, ID: ${visitor.userId})`
      ).join('\n');
    }

    const statsMessage = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
        `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
        `–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${paidSubscribers}\n` +
        `${visitorsList}`;

    await ctx.reply(statsMessage);
  } catch (error) {
    console.error(`Error in stats for user ${userId}:`, error.stack);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
bot.action('buy', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  const chatId = String(ctx.chat.id);

  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    const user = await User.findOne({ userId });
    if (user?.paymentStatus === 'succeeded' && user.inviteLink) {
      const now = Math.floor(Date.now() / 1000);
      if (user.inviteLinkExpires > now) {
        return ctx.reply('–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]],
          },
        });
      } else {
        return ctx.reply('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π.');
      }
    }

    const paymentId = uuidv4();
    const payment = await createPayment({
      amount: 399,
      description: '–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram –∫–∞–Ω–∞–ª—É',
      paymentId,
      userId,
      returnUrl: process.env.RETURN_URL,
    });

    await User.findOneAndUpdate(
        { userId },
        { paymentId, paymentStatus: 'pending', chatId, lastActivity: new Date() },
        { upsert: true }
    );

    await ctx.reply('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[{ text: '–û–ø–ª–∞—Ç–∏—Ç—å', url: payment.confirmation.confirmation_url }]],
      },
    });
  } catch (error) {
    console.error(`Payment error for user ${userId}:`, error.stack);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –∫–∞–Ω–∞–ª–µ"
bot.action('about', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    const settings = await getSettings();
    try {
      await ctx.editMessageText(settings.channelDescription, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]],
        },
      });
    } catch (editError) {
      console.warn(`Failed to edit message for user ${userId}:`, editError.message);
      await ctx.replyWithMarkdown(settings.channelDescription, {
        reply_markup: {
          inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]],
        },
      });
    }
  } catch (error) {
    console.error(`Error in about for user ${userId}:`, error.stack);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action('back', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = String(ctx.from.id);
  try {
    await User.findOneAndUpdate({ userId }, { lastActivity: new Date() });
    const settings = await getSettings();
    try {
      await ctx.editMessageText(getWelcomeMessage(), {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üî• –ö—É–ø–∏—Ç—å', callback_data: 'buy' },
              { text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: settings.supportLink },
            ],
            [{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }],
          ],
        },
      });
    } catch (editError) {
      console.warn(`Failed to edit message for user ${userId}:`, editError.message);
      await ctx.replyWithMarkdown(getWelcomeMessage(), {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üî• –ö—É–ø–∏—Ç—å', callback_data: 'buy' },
              { text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: settings.supportLink },
            ],
            [{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }],
          ],
        },
      });
    }
  } catch (error) {
    console.error(`Error in back for user ${userId}:`, error.stack);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
app.get('/', (req, res) => {
  res.send('–≠—Ç–æ API –±–æ—Ç–∞ alishasaldaevabaza-bot. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health –∏–ª–∏ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–æ—Ç—É –≤ Telegram.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –ÆKassa
app.get('/return', async (req, res) => {
  console.log('Received /return request with query:', req.query);
  const { paymentId } = req.query;
  if (paymentId) {
    const user = await User.findOne({ paymentId });
    if (user) {
      await bot.telegram.sendMessage(user.chatId, '–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–æ—Ç–µ.');
    }
  }
  res.send('–û–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram.');
});

// Health check –¥–ª—è Render
app.get('/health', (req, res) => res.sendStatus(200));

// –í–µ–±—Ö—É–∫ –¥–ª—è –ÆKassa
app.post('/webhook/yookassa', async (req, res) => {
  console.log('Received Yookassa webhook with body:', req.body);
  const { event, object } = req.body;

  if (event === 'payment.succeeded') {
    const user = await User.findOne({ paymentId: object.id });
    if (user && !user.joinedChannel) {
      try {
        const expireDate = Math.floor(Date.now() / 1000) + 24 * 60 * 60;
        const chatInvite = await bot.telegram.createChatInviteLink(
            process.env.CHANNEL_ID,
            {
              name: `Invite for user_${user.userId}`,
              member_limit: 1,
              creates_join_request: false,
              expire_date: expireDate,
            }
        );

        const paymentText = `–ü–ª–∞—Ç–µ–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n` +
            `ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${object.id}\n` +
            `–°—É–º–º–∞: ${object.amount.value} ${object.amount.currency}\n` +
            `–î–∞—Ç–∞: ${new Date(object.created_at).toLocaleString('ru-RU')}\n` +
            `–°—Ç–∞—Ç—É—Å: ${object.status}\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.userId}`;
        const paymentDoc = await bot.telegram.sendDocument(
            process.env.PAYMENT_GROUP_ID,
            {
              source: Buffer.from(paymentText),
              filename: `payment_${object.id}.txt`,
            },
            {
              caption: `–î–æ–∫—É–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è user_${user.userId}`,
            }
        );
        const paymentDocument = `https://t.me/c/${process.env.PAYMENT_GROUP_ID.split('-100')[1]}/${paymentDoc.message_id}`;

        await User.findOneAndUpdate(
            { userId: user.userId, paymentId: object.id },
            {
              paymentStatus: 'succeeded',
              joinedChannel: true,
              inviteLink: chatInvite.invite_link,
              inviteLinkExpires: expireDate,
              paymentDate: new Date(),
              paymentDocument,
              lastActivity: new Date(),
            },
            { new: true }
        );
        await bot.telegram.sendMessage(
            user.chatId,
            '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞):',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: chatInvite.invite_link }]],
              },
            }
        );
        for (const adminId of adminIds) {
          await bot.telegram.sendMessage(
              adminId,
              `–ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç user_${user.userId} (paymentId: ${object.id})`
          );
        }
      } catch (error) {
        console.error('Error processing webhook:', error.stack);
        await bot.telegram.sendMessage(
            user.chatId,
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
        );
      }
    }
  }
  res.sendStatus(200);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
console.log(`Starting server on port ${PORT}`);
app.listen(PORT, async () => {
  console.log(`Server running on port ${PORT}`);
  try {
    console.log('Setting webhook');
    await bot.telegram.setWebhook(`https://${process.env.RENDER_URL}/bot${process.env.BOT_TOKEN}`);
    console.log('Webhook set successfully');
    const webhookInfo = await bot.telegram.getWebhookInfo();
    console.log('Webhook info:', JSON.stringify(webhookInfo));
  } catch (error) {
    console.error('Failed to set webhook:', error.stack);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once('SIGINT', () => {
  console.log('SIGINT received, stopping bot');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('SIGTERM received, stopping bot');
  bot.stop('SIGTERM');
});