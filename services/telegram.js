const { Telegraf, session } = require('telegraf');
const { v4: uuidv4 } = require('uuid');
const User = require('../models/User');
const { getSettings, resetSettingsCache } = require('./settings');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π
console.log('[SETUP] Initializing Telegraf session middleware');
bot.use(session());

bot.catch((err, ctx) => {
  console.error('[TELEGRAM_ERROR] Error for update', JSON.stringify(ctx.update), ':', err.stack);
  if (ctx && ctx.chat) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

async function sendInviteLink(user, ctx, paymentId, retries = 3, delay = 1000) {
  try {
    console.log(`[INVITE] Processing invite link for user ${user.userId}, paymentId: ${paymentId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Å—Å—ã–ª–∫–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—Å—Ç—É–ø–∏–ª
    if (user.inviteLink && !user.inviteLinkUsed && user.inviteLinkExpires > Date.now()) {
      console.log(`[INVITE] User ${user.userId} has valid invite link: ${user.inviteLink}, expires: ${new Date(user.inviteLinkExpires).toLocaleString('ru-RU')}`);
      await bot.telegram.sendMessage(user.chatId, await getPaidWelcomeMessage(), {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }],
            [{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }],
          ],
        },
      });
      await bot.telegram.sendMessage(user.chatId, '–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:', {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: user.inviteLink }]] },
      });
      return user.inviteLink;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    const { getPayment } = require('./yookassa');
    const paymentData = await getPayment(paymentId);
    if (paymentData.status !== 'succeeded') {
      throw new Error(`[INVITE] Payment ${paymentId} status is ${paymentData.status}, expected succeeded`);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let chatInvite;
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const expiresDate = Math.floor(Date.now() / 1000) + 24 * 60 * 60; // –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 24 —á–∞—Å–∞
        chatInvite = await bot.telegram.createChatInviteLink(process.env.CHANNEL_ID, {
          name: `Invite for user_${user.userId}_${uuidv4()}`,
          member_limit: 1,
          creates_join_request: false,
          expires_date: expiresDate,
        });
        console.log(`[INVITE] Created unique invite link: ${chatInvite.invite_link} for user ${user.userId}, expires: ${new Date(expiresDate * 1000).toLocaleString('ru-RU')}`);
        break;
      } catch (error) {
        console.error(`[INVITE] Attempt ${attempt} failed for user ${user.userId}: ${error.message}`);
        if (attempt < retries && error.message.includes('Too Many Requests')) {
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
        throw error;
      }
    }

    if (!chatInvite) {
      throw new Error(`[INVITE] Failed to create invite link for user ${user.userId} after ${retries} attempts`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã
    const paymentText = `–ü–ª–∞—Ç–µ–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\nID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${paymentId}\n–°—É–º–º–∞: ${paymentData.amount.value} ${paymentData.amount.currency}\n–î–∞—Ç–∞: ${new Date(paymentData.created_at).toLocaleString('ru-RU')}\n–°—Ç–∞—Ç—É—Å: ${paymentData.status}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.userId}\nEmail: ${paymentData.receipt?.customer?.email || user.email || 'N/A'}`;
    const paymentDoc = await bot.telegram.sendDocument(process.env.PAYMENT_GROUP_ID, {
      source: Buffer.from(paymentText, 'utf8'),
      filename: `payment_${paymentId}.txt`,
    }, { caption: `–î–æ–∫—É–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è user_${user.userId}` });
    console.log(`[INVITE] Payment document sent to group ${process.env.PAYMENT_GROUP_ID}, message_id: ${paymentDoc.message_id}`);

    const paymentDocument = `https://t.me/c/${process.env.PAYMENT_GROUP_ID.replace('-100', '')}/${paymentDoc.message_id}`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
    await User.updateOne(
        { userId: user.userId, paymentId },
        {
          paymentStatus: 'succeeded',
          inviteLink: chatInvite.invite_link,
          inviteLinkExpires: chatInvite.expires_date * 1000,
          inviteLinkUsed: false,
          paymentDate: new Date(paymentData.created_at),
          paymentDocument,
          lastActivity: new Date(),
        },
        { upsert: true }
    );
    console.log(`[INVITE] User ${user.userId} updated with invite link: ${chatInvite.invite_link} and payment details`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.telegram.sendMessage(user.chatId, await getPaidWelcomeMessage(), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }],
          [{ text: 'üí° –û –∫–∞–Ω–∞–ª–µ', callback_data: 'about' }],
        ],
      },
    });
    await bot.telegram.sendMessage(user.chatId, '–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:', {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: [[{ text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', url: chatInvite.invite_link }]] },
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    const adminIds = new Set((process.env.ADMIN_CHAT_IDS || '').split(',').map(id => id.trim()));
    for (const adminId of adminIds) {
      await bot.telegram.sendMessage(adminId, `–ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç user_${user.userId} (paymentId: ${paymentId}). –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${chatInvite.invite_link}`);
    }
    console.log(`[INVITE] Admin notification sent for user ${user.userId}`);

    return chatInvite.invite_link;
  } catch (error) {
    console.error(`[INVITE] Error sending invite link for user ${user.userId}:`, error.message, error.stack);
    await bot.telegram.sendMessage(user.chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.', {
      reply_markup: { inline_keyboard: [[{ text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: (await getSettings()).supportLink }]] },
    });
    const adminIds = new Set((process.env.ADMIN_CHAT_IDS || '').split(',').map(id => id.trim()));
    for (const adminId of adminIds) {
      await bot.telegram.sendMessage(adminId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è user_${user.userId} (paymentId: ${paymentId}): ${error.message}`);
    }
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
bot.on('chat_member', async (ctx) => {
  try {
    const update = ctx.update.chat_member;
    if (update.chat.id.toString() === process.env.CHANNEL_ID && ['member', 'administrator', 'creator'].includes(update.new_chat_member.status)) {
      const userId = update.new_chat_member.user.id.toString();
      const user = await User.findOne({ userId, paymentStatus: 'succeeded' });

      if (user && user.inviteLink && !user.inviteLinkUsed) {
        console.log(`[INVITE] User ${userId} joined channel using invite link: ${user.inviteLink}`);
        await User.updateOne(
            { userId },
            {
              joinedChannel: true,
              inviteLinkUsed: true,
              lastActivity: new Date()
            }
        );
        console.log(`[INVITE] Marked invite link as used for user ${userId}`);

        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–æ–∑–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
        try {
          await ctx.telegram.revokeChatInviteLink(process.env.CHANNEL_ID, user.inviteLink);
          console.log(`[INVITE] Invite link ${user.inviteLink} revoked for user ${userId}`);
        } catch (revokeError) {
          console.warn(`[INVITE] Failed to revoke invite link for user ${userId}:`, revokeError.message);
        }
      } else {
        console.log(`[INVITE] No valid user or invite link found for user ${userId}`);
      }
    }
  } catch (error) {
    console.error('[INVITE] Error processing chat_member update:', error.message, error.stack);
  }
});

async function getWelcomeMessage() {
  const settings = await getSettings();
  return settings.welcomeMessage;
}

async function getPaidWelcomeMessage() {
  const settings = await getSettings();
  return settings.paidWelcomeMessage;
}

module.exports = {
  bot,
  sendInviteLink,
  getSettings,
  getWelcomeMessage,
  getPaidWelcomeMessage,
  resetSettingsCache
};